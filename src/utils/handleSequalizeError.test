import handleSequelizeError from "../utils/handleSequelizeError.ts";
import {
  ValidationError,
  UniqueConstraintError,
  DatabaseError,
} from "sequelize";
import chalk from "chalk";

describe("handleSequelizeError", () => {
  let consoleSpy: jest.SpyInstance;

  beforeEach(() => {
    //Mock console.log to prevent it from being called during tests
    consoleSpy = jest.spyOn(console, "log").mockImplementation();
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it("should handle ValidationError correctly", () => {
    const validationError = new ValidationError("Validation failed", [
      {
        message: "Field is required",
        path: "field1",
        type: "notnull violation",
        value: null
      } as any
    ]);

    handleSequelizeError(validationError);

    expect(consoleSpy).toHaveBeenCalledWith(
      chalk.red("Validation Error:", ["Field is required"])
    );
  });

  it("should handle UniqueConstraintError correctly", () => {
    const uniqueConstraintError = new UniqueConstraintError({
      message: "Unique constraint failed",
      errors: [
        {
          message: "Field must be unique",
          path: "field1",
          type: "unique violation",
          value: "test"
        } as any
      ]
    });

    handleSequelizeError(uniqueConstraintError);

    expect(consoleSpy).toHaveBeenCalledWith(
      chalk.red("Unique Constraint Error:", ["Field must be unique"])
    );
  });

  it("should handle DatabaseError correctly", () => {
    const databaseError = new DatabaseError({
      message: "Database connection failed",
      sql: "SELECT * FROM users",
      parameters: []
    } as any);

    handleSequelizeError(databaseError);

    expect(consoleSpy).toHaveBeenCalledWith(
      chalk.red("Database Error:", "Database connection failed")
    );
  });

  it("should handle unknown errors correctly", () => {
    const unknownError = new Error("Some unknown error");

    handleSequelizeError(unknownError);

    expect(consoleSpy).toHaveBeenCalledWith(
      chalk.red("Unknown Error:", unknownError)
    );
  });
});
